<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Custom ruleset"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>
        Custom rulest made for francescojo Android apps
    </description>

    <exclude-pattern>.*/R.java</exclude-pattern>
    <exclude-pattern>.*/build/.*</exclude-pattern>
    <exclude-pattern>.*/test/.*</exclude-pattern>
    <exclude-pattern>.*/androidTest/.*</exclude-pattern>

    <rule ref="rulesets/java/android.xml" />

    <rule ref="rulesets/java/basic.xml" />

    <rule ref="rulesets/java/codesize.xml" />
    <rule ref="rulesets/java/codesize.xml/ExcessivePublicCount">
        <!-- Default value is 45. Encapsulate as much as possible. -->
        <properties>
            <property name="minimum" value="25" />
        </properties>
    </rule>

    <rule ref="rulesets/java/codesize.xml/TooManyFields">
        <!-- Default value is 15. Activities usually have more fields. -->
        <properties>
            <property name="maxfields" value="20" />
        </properties>
    </rule>
    <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList">
        <!--
             Default value is 10. According to "Effective Java" and personal
             experience, more than 5 parameters makes reading very difficult
         -->
        <properties>
            <property name="minimum" value="5" />
        </properties>
    </rule>
    <rule ref="rulesets/java/codesize.xml/TooManyMethods">
        <!-- Implementing callbacks usually causes more than 10+ -->
        <properties>
            <property name="maxmethods" value="20" />
        </properties>
    </rule>

    <rule ref="rulesets/java/coupling.xml">
        <!-- Sometimes this makes source code more readable and shorter -->
        <exclude name="LawOfDemeter" />
    </rule>

    <rule ref="rulesets/java/design.xml" />

    <rule ref="rulesets/java/empty.xml" />

    <rule ref="rulesets/java/finalizers.xml" />

    <rule ref="rulesets/java/imports.xml">
        <!-- Espresso is designed this way !-->
        <exclude name="TooManyStaticImports" />
    </rule>

    <rule ref="rulesets/java/logging-java.xml">
        <!-- This rule wasn't working properly and given errors in every var call info -->
        <exclude name="GuardLogStatementJavaUtil" />
    </rule>

    <rule ref="rulesets/java/naming.xml">
        <!-- Better to check with Checkstyle -->
        <exclude name="LongVariable" />
        <exclude name="ShortMethodName" />
        <exclude name="ShortVariable" />
        <exclude name="ShortClassName" />
        <exclude name="VariableNamingConventions" />
    </rule>

    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="RedundantFieldInitializer" />
    </rule>

    <rule ref="rulesets/java/strictexception.xml" />

    <rule ref="rulesets/java/strings.xml" />
    <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">
        <properties>
            <property name="skipAnnotations" value="true" />
        </properties>
    </rule>

    <rule ref="rulesets/java/unnecessary.xml" />

    <rule ref="rulesets/java/unusedcode.xml" />

</ruleset>